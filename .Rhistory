null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
library(igraph)
library(ergm)
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(friend), col = "red")
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE),
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
sim_k_star = simulate(k_star, nsim = 100, verbose = TRUE, seed = 1)
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlim = c(-sd(degree(neurons_g, mode = "out"),sd(degree(neurons_g, mode = "out")),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlim = c(-10,10),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlim = c(,6),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlim = c(0,6),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlim = c(2,5.5),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlim = c(3.5,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new")  + gwodegree(decay = 1, fixed = TRUE),
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
sim_k_star = simulate(k_star, nsim = 100, verbose = TRUE, seed = 1)
library(intergraph)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr = matrix(,100,3)
for(b in 1:100){
null.distr[b,]  = fnc(sim_markov_no_triangles[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr[,3]), xlim = c(3.5,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE),
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE),
control = control.ergm(seed = 42, main.method = "Stochastic-Approximation"))
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE),
control = control.ergm(seed = 10, main.method = "Stochastic-Approximation"))
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE),
control = control.ergm(seed = 111, main.method = "Stochastic-Approximation"))
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE),
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE) + istar(2),
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = FALSE) + gwodegree(decay = 1, fixed = FALSE) ,
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = FALSE) + gwodegree(decay = 1, fixed = TRUE) ,
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE) ,
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
rm(list = ls())
library(igraph)
library(ergm)
library(intergraph)
neurons_g <- read_graph("Data/mouse_visual.cortex_2.graphml","graphml")
Y = as_adjacency_matrix(neurons_g, sparse = F)
diag(Y) = NA
neurons = network(Y, directed = T)
neurons %v% "type1" = vertex_attr(neurons_g,"type1",V(neurons_g))
neurons %v% "type2" = vertex_attr(neurons_g, "type2",V(neurons_g))
srg_homo = ergm(neurons ~ edges)
summary(srg_homo)
odds = exp(srg_homo$coefficients)
main_homo_type_one = ergm(neurons ~ edges + nodefactor("type1") + nodematch("type1"),
control = control.ergm(seed = 1))
summary(main_homo_type_one)
main_type_two = ergm(neurons ~ edges + nodefactor("type2"),
control = control.ergm(seed = 1))
summary(main_type_two)
main_homo = ergm(neurons ~ edges + nodefactor("type1") + nodefactor("type2")
+ nodematch("type1"),
control = control.ergm(seed = 1))
summary(main_homo)
bic_main_homo_type_one <- sprintf("%.2f", BIC(main_homo_type_one))
bic_main_type_two <- sprintf("%.2f", BIC(main_type_two))
bic_main_homo <- sprintf("%.2f", BIC(main_homo))
type1.new = rep(0, 195)
type1.new[vertex_attr(neurons_g,"type1") == "Characterized pyramidal neuron"] = 1
type1.new
neurons %v% "type1.new" = type1.new
type2.new = rep(0, 195)
type2.new[vertex_attr(neurons_g,"type2") == "Postsynaptic excitatory target"] = 1
type2.new
neurons %v% "type2.new" = type2.new
main_homo_type_one_binary = ergm(neurons ~ edges + nodefactor("type1.new")
+ nodematch("type1.new"),
control = control.ergm(seed = 1))
main_type_two_binary = ergm(neurons ~ edges + nodefactor("type2.new"),
control = control.ergm(seed = 1))
main_homo_binary = ergm(neurons ~ edges + nodefactor("type1.new")
+ nodefactor("type2.new") + nodematch("type1.new"),
control = control.ergm(seed = 1))
bic_main_homo_type_one_binary <- sprintf("%.2f", BIC(main_homo_type_one_binary))
bic_main_type_two_binary <- sprintf("%.2f", BIC(main_type_two_binary))
bic_main_homo_binary <- sprintf("%.2f", BIC(main_homo_binary))
summary(main_homo_type_one_binary)
markov = ergm(neurons ~ edges + nodefactor("type1.new") + nodematch("type1.new") + istar(2) + triangles,
control = control.ergm(seed = 1))
summary(mod9)
summary(markov)
markov_no_triangles = ergm(neurons ~ edges + nodefactor("type1.new")
+ nodematch("type1.new") + nodefactor("type2.new") + istar(2),
control = control.ergm(seed = 1))
summary(markov_no_triangles)
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new") + nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE) + gwodegree(decay = 1, fixed = TRUE) ,
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
social = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new")
+ nodematch("type1.new") +
gwdsp(decay = 1, fixed = T), control = control.ergm(seed=1, main.method = "Stochastic-Approximation" ))
summary(social)
nsim=100
sim_srg = simulate(srg_homo, nsim = nsim, verbose = TRUE, seed = 1)
sim_markov_no_triangles = simulate(k_star, nsim = nsim, verbose = TRUE, seed = 1)
sim_k_star = simulate(k_star, nsim = nsim, verbose = TRUE, seed = 1)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr.srg = matrix(,nsim,3)
null.distr.markov_no_triangles = matrix(,nsim,3)
null.distr.k_star = matrix(,nsim,3)
for(b in 1:nsim){
null.distr.srg[b,]  = fnc(sim_srg[[b]])
null.distr.markov_no_triangles[b,]  = fnc(sim_markov_no_triangles[[b]])
null.distr.k_star[b,]  = fnc(sim_k_star[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(3.5,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.markov_no_triangles[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.markov_no_triangles[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.markov_no_triangles[,3]), xlim = c(3.5,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.markov_no_triangles[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.markov_no_triangles[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.markov_no_triangles[,3]), xlim = c(4,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(0,10),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(1,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlim = c(1,5.25),xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(1,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlim = c(1,30),xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(1,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlim = c(0,2),xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(1,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlim = c(0.5,1.25),xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(1,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlim = c(0.25,1.25),xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(1,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.k_star[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.k_star[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.k_star[,3]), xlim = c(4,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.markov_no_triangles[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.markov_no_triangles[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.markov_no_triangles[,3]), xlim = c(4,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.k_star[,1]), xlab = "transitivity"); abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.k_star[,2]), xlab = "in-degree"); abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.k_star[,3]), xlim = c(4,5.25),xlab = "out-degree"); abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.k_star[,1]), xlab = "transitivity");
abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.k_star[,2]), xlab = "in-degree");
abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.k_star[,3]), xlim = c(4,5.25),xlab = "out-degree");
abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
library(igraph)
library(ergm)
library(intergraph)
library(sbm)
install.packages("sbm")
library(igraph)
library(ergm)
library(intergraph)
library(sbm)
library(igraph)
library(ergm)
library(intergraph)
library(sbm)
install.packages("reshape2")
install.packages("zeallot")
install.packages("reshape2")
remove.packages("zeallot", lib="~/R/x86_64-pc-linux-gnu-library/4.4")
knitr::opts_chunk$set(comment = NA)
rm(list = ls())
library(igraph)
library(ergm)
library(intergraph)
library(ggplot2)
neurons_g <- read_graph("Data/mouse_visual.cortex_2.graphml","graphml")
Y = as_adjacency_matrix(neurons_g, sparse = F)
diag(Y) = NA
neurons = network(Y, directed = T)
neurons %v% "type1" = vertex_attr(neurons_g,"type1",V(neurons_g))
neurons %v% "type2" = vertex_attr(neurons_g, "type2",V(neurons_g))
srg_homo = ergm(neurons ~ edges)
summary(srg_homo)
odds = exp(srg_homo$coefficients)
main_homo_type_one = ergm(neurons ~ edges + nodefactor("type1") + nodematch("type1"),
control = control.ergm(seed = 1))
summary(main_homo_type_one)
main_type_two = ergm(neurons ~ edges + nodefactor("type2"),
control = control.ergm(seed = 1))
summary(main_type_two)
main_homo = ergm(neurons ~ edges + nodefactor("type1") + nodefactor("type2")
+ nodematch("type1"),
control = control.ergm(seed = 1))
summary(main_homo)
bic_main_homo_type_one <- sprintf("%.2f", BIC(main_homo_type_one))
bic_main_type_two <- sprintf("%.2f", BIC(main_type_two))
bic_main_homo <- sprintf("%.2f", BIC(main_homo))
type1.new = rep(0, 195)
type1.new[vertex_attr(neurons_g,"type1") == "Characterized pyramidal neuron"] = 1
type1.new
neurons %v% "type1.new" = type1.new
type2.new = rep(0, 195)
type2.new[vertex_attr(neurons_g,"type2") == "Postsynaptic excitatory target"] = 1
type2.new
neurons %v% "type2.new" = type2.new
main_homo_type_one_binary = ergm(neurons ~ edges + nodefactor("type1.new")
+ nodematch("type1.new"),
control = control.ergm(seed = 1))
main_type_two_binary = ergm(neurons ~ edges + nodefactor("type2.new"),
control = control.ergm(seed = 1))
main_homo_binary = ergm(neurons ~ edges + nodefactor("type1.new")
+ nodefactor("type2.new") + nodematch("type1.new"),
control = control.ergm(seed = 1))
bic_main_homo_type_one_binary <- sprintf("%.2f", BIC(main_homo_type_one_binary))
bic_main_type_two_binary <- sprintf("%.2f", BIC(main_type_two_binary))
bic_main_homo_binary <- sprintf("%.2f", BIC(main_homo_binary))
summary(main_homo_type_one_binary)
markov = ergm(neurons ~ edges + nodefactor("type1.new") +
nodematch("type1.new") + istar(2) + triangles,
control = control.ergm(seed = 1))
summary(markov)
markov_no_triangles = ergm(neurons ~ edges + nodefactor("type1.new")
+ nodematch("type1.new") + nodefactor("type2.new") + istar(2),
control = control.ergm(seed = 1))
summary(markov_no_triangles)
bic_markov <- sprintf("%.2f", BIC(markov))
bic_markov_no_triangles <- sprintf("%.2f", BIC(markov_no_triangles))
k_star = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new")
+ nodematch("type1.new") + gwidegree(decay = 1, fixed = TRUE)
+ gwodegree(decay = 1, fixed = TRUE) ,
control = control.ergm(seed = 1, main.method = "Stochastic-Approximation"))
summary(k_star)
social = ergm(neurons ~ edges + nodefactor("type1.new") + nodefactor("type2.new")
+ nodematch("type1.new") + gwdsp(decay = 1, fixed = T),
control = control.ergm(seed=1, main.method = "Stochastic-Approximation" ))
summary(social)
bic_srg_homo <- sprintf("%.2f", BIC(srg_homo))
bic_k_star <- sprintf("%.2f", BIC(k_star))
nsim=100
sim_srg = simulate(srg_homo, nsim = nsim, verbose = TRUE, seed = 1)
sim_markov_no_triangles = simulate(k_star, nsim = nsim, verbose = TRUE, seed = 1)
sim_k_star = simulate(k_star, nsim = nsim, verbose = TRUE, seed = 1)
fnc = function(xx){
ig = asIgraph(xx)
tr = transitivity(ig)
ideg = sd(degree(ig, mode = "in"))
odeg = sd(degree(ig, mode = "out"))
return(c(tr, ideg, odeg))
}
null.distr.srg = matrix(,nsim,3)
null.distr.markov_no_triangles = matrix(,nsim,3)
null.distr.k_star = matrix(,nsim,3)
for(b in 1:nsim){
null.distr.srg[b,]  = fnc(sim_srg[[b]])
null.distr.markov_no_triangles[b,]  = fnc(sim_markov_no_triangles[[b]])
null.distr.k_star[b,]  = fnc(sim_k_star[[b]])
}
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.srg[,1]), xlab = "transitivity");
abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.srg[,2]), xlim = c(0.25,1.25),xlab = "in-degree");
abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.srg[,3]), xlim = c(1,5.25),xlab = "out-degree");
abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.markov_no_triangles[,1]), xlab = "transitivity");
abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.markov_no_triangles[,2]), xlab = "in-degree");
abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.markov_no_triangles[,3]),
xlim = c(4,5.25),xlab = "out-degree");
abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
dev.new()
par(mfrow = c(3,1))
hist(unlist(null.distr.k_star[,1]), xlab = "transitivity");
abline(v = transitivity(neurons_g), col = "red")
hist(unlist(null.distr.k_star[,2]), xlab = "in-degree");
abline(v = sd(degree(neurons_g, mode = "in")), col = "red")
hist(unlist(null.distr.k_star[,3]), xlim = c(4,5.25),xlab = "out-degree");
abline(v = sd(degree(neurons_g, mode = "out")), col = "red")
library(rmarkdown)
render("NetworkModels.Rmd", output_format = "pdf_document")
